/*
 *  BitRPG
 *  https://github.com/AndrewBelt/BitRPG
 *
 */

#include "ContentManager.h"
#include "Exception.h"

#include <string>
#include <fstream>
#include <sstream>

using namespace bit;
using namespace sf;
using namespace std;
using namespace boost::filesystem;


ContentManager::ContentManager()
{
	// TODO
	// Resource path should be generated by platform and working directory
	
	// On Mac OS X, the resource path should point to the Resources
	// directory inside the app bundle.
	
	resourcePath = current_path();
}


shared_ptr<sf::Image> ContentManager::loadImage(const string &filename)
{
	string filePath = getAbsoluteFilename(filename);
	
	// Create a new image
	
	shared_ptr<sf::Image> image(new Image);
	bool success = image->loadFromFile(filePath);
	
	if (!success)
		throw bit::Exception("Could not load file " + filename);
	
	return image;
}


string ContentManager::loadText(const string &filename)
{
	string filePath = getAbsoluteFilename(filename);
	
	// Open file stream
	
	ifstream file;
	file.open(filePath.c_str());
	
	// Dump entire file into buffer
	
	stringstream buffer;
	buffer << file.rdbuf();
	
	return buffer.str();
}


shared_ptr<sf::Font> ContentManager::loadFont(const string &filename)
{
	string filePath = getAbsoluteFilename(filename);
	
	// Create the font
	
	shared_ptr<sf::Font> font(new Font);
	bool success = font->loadFromFile(filePath);
	
	if (!success)
		throw bit::Exception("Font " + filePath + " could not be loaded");
	
	return font;
}


shared_ptr<Music> ContentManager::loadMusic(const string &filename)
{
	string filePath = getAbsoluteFilename(filename);
	
	// Create the music
	
	shared_ptr<Music> music(new Music);
	bool success = music->openFromFile(filename);
	
	if (!success)
		throw bit::Exception("Music " + filePath + " could not be loaded");
	
	return music;
}


std::string ContentManager::getAbsoluteFilename(const string &filename)
{
	path relativePath(filename);
	
	// Convert the relative path to absolute
	
	path absolutePath = absolute(relativePath, resourcePath);
	
	// Check if the file exists
	
	if (!is_regular_file(absolutePath))
	{
		string message("File ");
		message.append(absolutePath.string());
		message.append(" does not exist");
		
		throw bit::Exception(message);
	}
	
	return absolutePath.string();
}
