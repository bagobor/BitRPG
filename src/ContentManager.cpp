/*
 *  BitRPG
 *  https://github.com/AndrewBelt/BitRPG
 *
 */

#include "ContentManager.h"
#include "Exception.h"

#include <string>
#include <fstream>
#include <sstream>

using namespace bit;
using namespace sf;
using namespace std;
using namespace boost::filesystem;


ContentManager::ContentManager()
{
	// TODO
	// Resource path should be generated by platform and working directory
	
	// On Mac OS X, the resource path should point to the Resources
	// directory inside the app bundle.
	
	resourcePath = current_path();
}


ImagePtr ContentManager::loadImage(const string &filename)
{
	// Check if image has already been loaded
	
	map<string, ImagePtr>::iterator imageIt;
	imageIt = images.find(filename);
	
	if (imageIt != images.end())
	{
		return imageIt->second;
	}
	else
	{
		string filePath = getAbsoluteFilename(filename);
		
		// Create a new image
		
		ImagePtr image(new Image);
		bool success = image->loadFromFile(filePath);
		
		if (!success)
			throw bit::Exception("Could not load file " + filename);
		
		// Insert image into images map
		
		
		pair<string, ImagePtr> imagePair(filename, image);
		images.insert(imagePair);
		return image;
	}
}


TexturePtr ContentManager::loadTexture(const string &filename,
	const IntRect &area)
{
	// Get image from filename
	
	ImagePtr image = loadImage(filename);
	
	// Create new texture from image
	
	sf::TexturePtr texture(new Texture);
	texture->loadFromImage(*image, area);
	
	return texture;
}


string ContentManager::loadText(const string &filename)
{
	string filePath = getAbsoluteFilename(filename);
	
	// Open file stream
	
	ifstream file;
	file.open(filePath.c_str());
	
	// Dump entire file into buffer
	
	stringstream buffer;
	buffer << file.rdbuf();
	
	return buffer.str();
}


FontPtr ContentManager::loadFont(const string &filename)
{
	string filePath = getAbsoluteFilename(filename);
	
	// Create the font
	
	FontPtr font(new Font);
	bool success = font->loadFromFile(filePath);
	
	if (!success)
		throw bit::Exception("Font " + filePath + " could not be loaded");
	
	return font;
}


std::string ContentManager::getAbsoluteFilename(const string &filename)
{
	path relativePath(filename);
	
	// Convert the relative path to absolute
	
	path absolutePath = absolute(relativePath, resourcePath);
	
	// Check if the file exists
	
	if (!is_regular_file(absolutePath))
	{
		string message("File ");
		message.append(absolutePath.string());
		message.append(" does not exist");
		
		throw bit::Exception(message);
	}
	
	return absolutePath.string();
}
